---
- name: Ensure mysql group
  ansible.builtin.group:
    name: mysql
    system: yes
    state: present
  when:
    - inventory_hostname in groups[mysql_inventory_group]

- name: Ensure mysql user
  ansible.builtin.user:
    group: mysql
    name: mysql
    system: yes
    comment: mysql daemon user
    create_home: false
    shell: /bin/false
    state: present
  when:
    - inventory_hostname in groups[mysql_inventory_group]

- name: Disable Transparent Huge Pages (THP)
  ansible.builtin.shell:
    cmd: echo never > {{ item }}
  changed_when: false
  ignore_errors: true
  loop:
    - /sys/kernel/mm/transparent_hugepage/enabled
    - /sys/kernel/mm/transparent_hugepage/defrag

- name: Check /etc/rc.local file
  ansible.builtin.stat:
    path: /etc/rc.local
  register: _rc_local_status
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_major_version | int >= 16

- name: Update /etc/rc.local
  ansible.builtin.copy:
    content: |
      #!/bin/bash
      #
      # This script is executed at the end of each multiuser runlevel.
      # Make sure that the script will "exit 0" on success or any other
      # value on error.
      #
      # In order to enable or disable this script just change the execution
      # bits.
      #
      # By default this script does nothing.

      exit 0
    dest: /etc/rc.local
    force: false
    mode: "0755"
    owner: root
    group: root
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_major_version | int >= 16
    - not _rc_local_status.stat.exists

- name: Update rc-local.service
  community.general.ini_file:
    path: /lib/systemd/system/rc-local.service
    section: Install
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    no_extra_spaces: true
    backup: yes
    mode: "0644"
    owner: root
    group: root
  loop:
    - option: WantedBy
      value: multi-user.target
    - option: Alias
      value: rc-local.service
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_major_version | int >= 16

- name: Enable rc-local.service
  ansible.builtin.systemd:
    name: rc-local.service
    enabled: true
    state: started
    daemon_reload: true
  when:
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_major_version | int >= 16

- name: Disable Transparent Huge Pages (THP) forever
  ansible.builtin.blockinfile:
    marker: "# {mark} Disable Transparent Huge Pages"
    block: |
      if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
        echo never > /sys/kernel/mm/transparent_hugepage/enabled
      fi
      if test -f /sys/kernel/mm/transparent_hugepage/defrag; then
        echo never > /sys/kernel/mm/transparent_hugepage/defrag
      fi
    path: /etc/rc.local
    insertbefore: "^^(\\s+)?exit\\s+0"
    state: present

- name: Installing mysql dependencies
  ansible.builtin.package:
    name: "{{ mysql_dependencies }}"
    state: present
    update_cache: true
  when:
    - inventory_hostname in groups[mysql_inventory_group]

- name: Query group replicaton primary node
  community.mysql.mysql_query:
    query: "SELECT member_host FROM performance_schema.replication_group_members WHERE member_role = 'PRIMARY' LIMIT 1"
  register: _gr_primary_status
  ignore_errors: true
  changed_when: false
  check_mode: false
  when:
    - inventory_hostname in groups[mysql_inventory_group]
    - mysql_cluster_type == 'mgr'

- name: Set primary node (MGR)
  vars:
    primary_member_host: "{{ _gr_primary_status.query_result[0][0].member_host }}"
  ansible.builtin.set_fact:
    _primary_node: "{{ hostvars | dict2items | rejectattr('value._gr_primary_status', 'undefined') | selectattr('value.ansible_facts.default_ipv4.address', 'equalto', primary_member_host) | map(attribute='key') | first }}"
  when:
    - inventory_hostname in groups[mysql_inventory_group]
    - mysql_cluster_type == 'mgr'
    - _gr_primary_status is not skipped
    - _gr_primary_status is not failed
    - _gr_primary_status.rowcount[0] > 0

- name: Query Primay-Replica primary node
  community.mysql.mysql_query:
    query: SHOW {{ mysql_version is version('8.0.22', '>=') | ternary('REPLICAS', 'SLAVE HOSTS') }}
  register: _ms_primary_status
  ignore_errors: true
  changed_when: false
  check_mode: false
  when:
    - groups[mysql_inventory_group]|count > 1
    - mysql_cluster_type == 'ms'

- name: Set primary node (Primary Replica)
  ansible.builtin.set_fact:
    _primary_node: "{{ hostvars | dict2items | rejectattr('value._ms_primary_status.rowcount', 'undefined') | selectattr('value._ms_primary_status.rowcount', 'ne', [0]) | map(attribute='key') | first }}"
  ignore_errors: true
  when:
    - groups[mysql_inventory_group]|count > 1
    - mysql_cluster_type == 'ms'
    - _ms_primary_status is not skipped

- name: Set primary node (default)
  ansible.builtin.set_fact:
    _primary_node: "{{ hostvars[groups[mysql_inventory_group][0]]['inventory_hostname'] }}"
  when:
    # - inventory_hostname in groups[mysql_inventory_group]
    - _primary_node is undefined or _primary_node|length == 0

- name: Set install prefix
  ansible.builtin.set_fact:
    mysql_versioned_basedir: /usr/local/{{ mysql_download_url | basename | regex_replace('.tar.*$') }}
    mysql_package_name: "{{ mysql_download_url | basename }}"
    _mysql_term: "{{ (mysql_version is version('8.0.22', operator='>=')) | ternary('Replica', 'Slave') }}"
