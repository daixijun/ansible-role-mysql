---
- name: Check the group replication status
  community.mysql.mysql_query:
    query: "SELECT service_state FROM performance_schema.replication_connection_status WHERE channel_name='group_replication_applier';"
  register: group_replication_status
  run_once: true
  delegate_to: "{{ _primary_node }}"
  changed_when: false
  check_mode: false

- name: Query group replication members
  community.mysql.mysql_query:
    query: "SELECT member_state FROM performance_schema.replication_group_members WHERE member_host = '{{ _member_host }}' LIMIT 1"
  vars:
    _member_host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
  changed_when: false
  register: group_replocation_members
  check_mode: false

- name: Change master for group replication channel
  community.mysql.mysql_replication:
    channel: group_replication_recovery
    master_user: "{{ mysql_repl_user }}"
    master_password: "{{ mysql_repl_password }}"
    mode: changeprimary
    fail_on_error: true
  when:
    - group_replication_status.rowcount[0] == 0 or group_replication_status.query_result[0][0].service_state != 'ON'
    - group_replocation_members.rowcount[0] == 0 or group_replocation_members.query_result[0][0].member_state != 'ONLINE'

- name: Bootstrap group replication on first primary node
  community.mysql.mysql_query:
    query:
      - "SET GLOBAL group_replication_bootstrap_group=ON;"
      - "START GROUP_REPLICATION;"
      - "SET GLOBAL group_replication_bootstrap_group=OFF;"
    single_transaction: true
  run_once: true
  delegate_to: "{{ _primary_node }}"
  when:
    - group_replication_status.rowcount[0] == 0 or group_replication_status.query_result[0][0].service_state != 'ON'

- name: Startting group replication member nodes
  community.mysql.mysql_query:
    query: "START GROUP_REPLICATION;"
  when:
    - group_replication_status.rowcount[0] == 0 or group_replocation_members.rowcount[0] == 0 or group_replocation_members.query_result[0][0].member_state != 'ONLINE'
    - inventory_hostname != _primary_node

- name: Copy gr_member_routing_candidate_status.sql
  copy:
    src: gr_member_routing_candidate_status.sql
    dest: "{{ mysql_datadir }}/gr_member_routing_candidate_status.sql"
    mode: "0600"
    owner: root
    group: root
  run_once: true
  delegate_to: "{{ _primary_node }}"
  when:
    - mysql_proxysql_config|bool

- name: Create internal view sys.gr_member_routing_candidate_status for monitoring
  community.mysql.mysql_db:
    name: all
    target: "{{ mysql_datadir }}/gr_member_routing_candidate_status.sql"
    state: import
  environment:
    PATH: "{{ mysql_basedir }}/bin:{{ ansible_env.PATH }}"
  run_once: true
  delegate_to: "{{ _primary_node }}"
  when:
    - mysql_proxysql_config|bool
  tags:
    - molecule-idempotence-notest
